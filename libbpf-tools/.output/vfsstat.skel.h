/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __VFSSTAT_BPF_SKEL_H__
#define __VFSSTAT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct vfsstat_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *kprobe_vfs_read;
		struct bpf_program *kprobe_vfs_write;
		struct bpf_program *kprobe_vfs_fsync;
		struct bpf_program *kprobe_vfs_open;
		struct bpf_program *kprobe_vfs_create;
		struct bpf_program *fentry_vfs_read;
		struct bpf_program *fentry_vfs_write;
		struct bpf_program *fentry_vfs_fsync;
		struct bpf_program *fentry_vfs_open;
		struct bpf_program *fentry_vfs_create;
	} progs;
	struct {
		struct bpf_link *kprobe_vfs_read;
		struct bpf_link *kprobe_vfs_write;
		struct bpf_link *kprobe_vfs_fsync;
		struct bpf_link *kprobe_vfs_open;
		struct bpf_link *kprobe_vfs_create;
		struct bpf_link *fentry_vfs_read;
		struct bpf_link *fentry_vfs_write;
		struct bpf_link *fentry_vfs_fsync;
		struct bpf_link *fentry_vfs_open;
		struct bpf_link *fentry_vfs_create;
	} links;
	struct vfsstat_bpf__bss {
		__u64 stats[5];
	} *bss;

#ifdef __cplusplus
	static inline struct vfsstat_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct vfsstat_bpf *open_and_load();
	static inline int load(struct vfsstat_bpf *skel);
	static inline int attach(struct vfsstat_bpf *skel);
	static inline void detach(struct vfsstat_bpf *skel);
	static inline void destroy(struct vfsstat_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
vfsstat_bpf__destroy(struct vfsstat_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
vfsstat_bpf__create_skeleton(struct vfsstat_bpf *obj);

static inline struct vfsstat_bpf *
vfsstat_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct vfsstat_bpf *obj;
	int err;

	obj = (struct vfsstat_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = vfsstat_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	vfsstat_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct vfsstat_bpf *
vfsstat_bpf__open(void)
{
	return vfsstat_bpf__open_opts(NULL);
}

static inline int
vfsstat_bpf__load(struct vfsstat_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct vfsstat_bpf *
vfsstat_bpf__open_and_load(void)
{
	struct vfsstat_bpf *obj;
	int err;

	obj = vfsstat_bpf__open();
	if (!obj)
		return NULL;
	err = vfsstat_bpf__load(obj);
	if (err) {
		vfsstat_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
vfsstat_bpf__attach(struct vfsstat_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
vfsstat_bpf__detach(struct vfsstat_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *vfsstat_bpf__elf_bytes(size_t *sz);

static inline int
vfsstat_bpf__create_skeleton(struct vfsstat_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "vfsstat_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "vfsstat_.bss";
	s->maps[0].map = &obj->maps.bss;
	s->maps[0].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 10;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "kprobe_vfs_read";
	s->progs[0].prog = &obj->progs.kprobe_vfs_read;
	s->progs[0].link = &obj->links.kprobe_vfs_read;

	s->progs[1].name = "kprobe_vfs_write";
	s->progs[1].prog = &obj->progs.kprobe_vfs_write;
	s->progs[1].link = &obj->links.kprobe_vfs_write;

	s->progs[2].name = "kprobe_vfs_fsync";
	s->progs[2].prog = &obj->progs.kprobe_vfs_fsync;
	s->progs[2].link = &obj->links.kprobe_vfs_fsync;

	s->progs[3].name = "kprobe_vfs_open";
	s->progs[3].prog = &obj->progs.kprobe_vfs_open;
	s->progs[3].link = &obj->links.kprobe_vfs_open;

	s->progs[4].name = "kprobe_vfs_create";
	s->progs[4].prog = &obj->progs.kprobe_vfs_create;
	s->progs[4].link = &obj->links.kprobe_vfs_create;

	s->progs[5].name = "fentry_vfs_read";
	s->progs[5].prog = &obj->progs.fentry_vfs_read;
	s->progs[5].link = &obj->links.fentry_vfs_read;

	s->progs[6].name = "fentry_vfs_write";
	s->progs[6].prog = &obj->progs.fentry_vfs_write;
	s->progs[6].link = &obj->links.fentry_vfs_write;

	s->progs[7].name = "fentry_vfs_fsync";
	s->progs[7].prog = &obj->progs.fentry_vfs_fsync;
	s->progs[7].link = &obj->links.fentry_vfs_fsync;

	s->progs[8].name = "fentry_vfs_open";
	s->progs[8].prog = &obj->progs.fentry_vfs_open;
	s->progs[8].link = &obj->links.fentry_vfs_open;

	s->progs[9].name = "fentry_vfs_create";
	s->progs[9].prog = &obj->progs.fentry_vfs_create;
	s->progs[9].link = &obj->links.fentry_vfs_create;

	s->data = vfsstat_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *vfsstat_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc0\x11\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x6b\x70\x72\x6f\x62\x65\
\x2f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\
\x73\x5f\x66\x73\x79\x6e\x63\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x6f\
\x70\x65\x6e\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\
\x65\0\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x66\x65\
\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x66\x65\x6e\x74\x72\
\x79\x2f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\0\x66\x65\x6e\x74\x72\x79\x2f\x76\
\x66\x73\x5f\x6f\x70\x65\x6e\0\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x63\
\x72\x65\x61\x74\x65\0\x2e\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x76\x66\
\x73\x73\x74\x61\x74\x2e\x62\x70\x66\x2e\x63\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\
\x66\x73\x5f\x72\x65\x61\x64\0\x73\x74\x61\x74\x73\0\x6b\x70\x72\x6f\x62\x65\
\x5f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\
\x73\x5f\x66\x73\x79\x6e\x63\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x6f\
\x70\x65\x6e\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\
\x65\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x66\x65\
\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x66\x65\x6e\x74\x72\
\x79\x5f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\0\x66\x65\x6e\x74\x72\x79\x5f\x76\
\x66\x73\x5f\x6f\x70\x65\x6e\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x63\
\x72\x65\x61\x74\x65\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x6b\x70\
\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x2e\x72\x65\x6c\x6b\x70\
\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x2e\x72\x65\x6c\x6b\
\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\0\x2e\x72\x65\x6c\
\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x6f\x70\x65\x6e\0\x2e\x72\x65\x6c\
\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\0\x2e\x72\
\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x2e\x72\
\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\0\x2e\
\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\0\
\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x6f\x70\x65\x6e\0\
\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x63\x72\x65\x61\
\x74\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\0\0\0\x12\
\0\x03\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\xe4\0\0\0\x11\0\x0d\0\0\0\0\0\0\0\0\
\0\x28\0\0\0\0\0\0\0\xea\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\xfb\0\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x0c\x01\0\0\x12\0\x06\
\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x1c\x01\0\0\x12\0\x07\0\0\0\0\0\0\0\0\0\
\x30\0\0\0\0\0\0\0\x2e\x01\0\0\x12\0\x08\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x3e\x01\0\0\x12\0\x09\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x4f\x01\0\0\x12\0\
\x0a\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x60\x01\0\0\x12\0\x0b\0\0\0\0\0\0\0\0\
\0\x30\0\0\0\0\0\0\0\x70\x01\0\0\x12\0\x0c\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x82\x01\0\0\x11\0\x0e\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\x08\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\x10\0\0\0\0\0\xb7\0\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\x18\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\x20\0\0\0\0\0\xb7\0\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\
\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\x08\0\0\0\0\0\xb7\0\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\x10\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\x18\0\0\0\0\0\xb7\0\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\x20\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x2c\x03\0\0\x2c\x03\0\0\x12\x04\0\0\0\0\0\0\0\
\0\0\x02\x02\0\0\0\x01\0\0\0\x09\0\0\x04\x50\x01\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\
\x09\0\0\0\x0a\0\0\0\x80\x08\0\0\x11\0\0\0\x0c\0\0\0\xc0\x08\0\0\x1b\0\0\0\x0f\
\0\0\0\xe0\x08\0\0\x23\0\0\0\x0a\0\0\0\0\x09\0\0\x2e\0\0\0\x0a\0\0\0\x40\x09\0\
\0\x37\0\0\0\x12\0\0\0\x80\x09\0\0\x42\0\0\0\x0a\0\0\0\0\x0a\0\0\x53\0\0\0\x0a\
\0\0\0\x40\x0a\0\0\0\0\0\0\x02\0\0\x05\x10\x01\0\0\x5c\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\x09\0\0\0\0\0\0\0\x66\0\0\0\x04\0\0\x04\x10\x01\0\0\x73\0\0\0\x07\0\0\
\0\0\0\0\0\x78\0\0\0\x05\0\0\0\xc0\x07\0\0\x7b\0\0\0\x05\0\0\0\0\x08\0\0\x7e\0\
\0\0\x05\0\0\0\x40\x08\0\0\x85\0\0\0\0\0\0\x08\x06\0\0\0\x8b\0\0\0\0\0\0\x01\
\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x05\0\0\0\x08\0\0\0\x1f\0\0\0\
\x9e\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x10\x01\0\0\x73\0\
\0\0\x0b\0\0\0\0\0\0\0\x78\0\0\0\x0a\0\0\0\xc0\x07\0\0\x7b\0\0\0\x0a\0\0\0\0\
\x08\0\0\x7e\0\0\0\x0a\0\0\0\x40\x08\0\0\xb2\0\0\0\0\0\0\x08\x05\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0a\0\0\0\x08\0\0\0\x1f\0\0\0\xb6\0\0\0\0\0\0\x08\x0d\0\0\0\
\xba\0\0\0\0\0\0\x08\x0e\0\0\0\xc0\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\xc4\0\
\0\0\0\0\0\x08\x10\0\0\0\xc8\0\0\0\0\0\0\x08\x11\0\0\0\xce\0\0\0\0\0\0\x01\x04\
\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0a\0\0\0\x08\0\0\0\x02\0\0\0\0\0\0\
\0\x01\0\0\x0d\x0e\0\0\0\xdb\0\0\0\x01\0\0\0\xdf\0\0\0\x01\0\0\x0c\x13\0\0\0\
\xef\0\0\0\x01\0\0\x0c\x13\0\0\0\0\x01\0\0\x01\0\0\x0c\x13\0\0\0\x11\x01\0\0\
\x01\0\0\x0c\x13\0\0\0\x21\x01\0\0\x01\0\0\x0c\x13\0\0\0\0\0\0\0\0\0\0\x02\x06\
\0\0\0\0\0\0\0\x01\0\0\x0d\x0e\0\0\0\xdb\0\0\0\x19\0\0\0\x33\x01\0\0\x01\0\0\
\x0c\x1a\0\0\0\x43\x01\0\0\x01\0\0\x0c\x1a\0\0\0\x54\x01\0\0\x01\0\0\x0c\x1a\0\
\0\0\x65\x01\0\0\x01\0\0\x0c\x1a\0\0\0\x75\x01\0\0\x01\0\0\x0c\x1a\0\0\0\0\0\0\
\0\0\0\0\x03\0\0\0\0\x05\0\0\0\x08\0\0\0\x05\0\0\0\x87\x01\0\0\0\0\0\x0e\x20\0\
\0\0\x01\0\0\0\x8d\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\
\0\0\0\x22\0\0\0\x08\0\0\0\x04\0\0\0\x92\x01\0\0\0\0\0\x0e\x23\0\0\0\x01\0\0\0\
\x5d\x03\0\0\x01\0\0\x0f\x28\0\0\0\x21\0\0\0\0\0\0\0\x28\0\0\0\x62\x03\0\0\x01\
\0\0\x0f\x04\0\0\0\x24\0\0\0\0\0\0\0\x04\0\0\0\0\x70\x74\x5f\x72\x65\x67\x73\0\
\x6f\x72\x69\x67\x5f\x78\x30\0\x73\x79\x73\x63\x61\x6c\x6c\x6e\x6f\0\x75\x6e\
\x75\x73\x65\x64\x32\0\x73\x64\x65\x69\x5f\x74\x74\x62\x72\x31\0\x70\x6d\x72\
\x5f\x73\x61\x76\x65\0\x73\x74\x61\x63\x6b\x66\x72\x61\x6d\x65\0\x6c\x6f\x63\
\x6b\x64\x65\x70\x5f\x68\x61\x72\x64\x69\x72\x71\x73\0\x65\x78\x69\x74\x5f\x72\
\x63\x75\0\x75\x73\x65\x72\x5f\x72\x65\x67\x73\0\x75\x73\x65\x72\x5f\x70\x74\
\x5f\x72\x65\x67\x73\0\x72\x65\x67\x73\0\x73\x70\0\x70\x63\0\x70\x73\x74\x61\
\x74\x65\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\
\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x36\x34\0\x73\x33\x32\0\x5f\x5f\x73\x33\x32\
\0\x69\x6e\x74\0\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\
\x73\x5f\x72\x65\x61\x64\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x77\x72\
\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\
\0\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x6f\x70\x65\x6e\0\x6b\x70\x72\
\x6f\x62\x65\x5f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\0\x66\x65\x6e\x74\x72\
\x79\x5f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\
\x73\x5f\x77\x72\x69\x74\x65\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x66\
\x73\x79\x6e\x63\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x6f\x70\x65\x6e\
\0\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\0\x73\
\x74\x61\x74\x73\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x68\x6f\
\x6d\x65\x2f\x72\x65\x76\x65\x72\x63\x63\x71\x69\x6e\x2f\x65\x62\x70\x66\x2f\
\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2d\x66\x6f\
\x72\x2d\x61\x6e\x64\x72\x6f\x69\x64\x2f\x6c\x69\x62\x62\x70\x66\x2d\x74\x6f\
\x6f\x6c\x73\x2f\x76\x66\x73\x73\x74\x61\x74\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\
\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\
\x5f\x76\x66\x73\x5f\x72\x65\x61\x64\x29\0\x09\x5f\x5f\x61\x74\x6f\x6d\x69\x63\
\x5f\x61\x64\x64\x5f\x66\x65\x74\x63\x68\x28\x26\x73\x74\x61\x74\x73\x5b\x6b\
\x65\x79\x5d\x2c\x20\x31\x2c\x20\x5f\x5f\x41\x54\x4f\x4d\x49\x43\x5f\x52\x45\
\x4c\x41\x58\x45\x44\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\
\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x77\x72\x69\x74\x65\
\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\
\x6f\x62\x65\x5f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\x29\0\x69\x6e\x74\x20\x42\
\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\
\x73\x5f\x6f\x70\x65\x6e\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\
\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\
\x65\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\x65\x6e\x74\
\x72\x79\x5f\x76\x66\x73\x5f\x72\x65\x61\x64\x29\0\x69\x6e\x74\x20\x42\x50\x46\
\x5f\x50\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x77\x72\
\x69\x74\x65\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\x65\
\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x66\x73\x79\x6e\x63\x29\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\
\x5f\x6f\x70\x65\x6e\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\
\x66\x65\x6e\x74\x72\x79\x5f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\x29\0\x2e\
\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\
\x66\x73\x5f\x72\x65\x61\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x77\
\x72\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x66\x73\x79\x6e\
\x63\0\x6b\x70\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x6f\x70\x65\x6e\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\0\x66\x65\x6e\x74\
\x72\x79\x2f\x76\x66\x73\x5f\x72\x65\x61\x64\0\x66\x65\x6e\x74\x72\x79\x2f\x76\
\x66\x73\x5f\x77\x72\x69\x74\x65\0\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\
\x66\x73\x79\x6e\x63\0\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x6f\x70\x65\
\x6e\0\x66\x65\x6e\x74\x72\x79\x2f\x76\x66\x73\x5f\x63\x72\x65\x61\x74\x65\0\0\
\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\xa4\0\0\0\xa4\0\0\0\x34\x02\0\0\xd8\x02\0\0\
\0\0\0\0\x08\0\0\0\x6a\x03\0\0\x01\0\0\0\0\0\0\0\x14\0\0\0\x7a\x03\0\0\x01\0\0\
\0\0\0\0\0\x15\0\0\0\x8b\x03\0\0\x01\0\0\0\0\0\0\0\x16\0\0\0\x9c\x03\0\0\x01\0\
\0\0\0\0\0\0\x17\0\0\0\xac\x03\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\xbe\x03\0\0\x01\
\0\0\0\0\0\0\0\x1b\0\0\0\xce\x03\0\0\x01\0\0\0\0\0\0\0\x1c\0\0\0\xdf\x03\0\0\
\x01\0\0\0\0\0\0\0\x1d\0\0\0\xf0\x03\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\0\x04\0\0\
\x01\0\0\0\0\0\0\0\x1f\0\0\0\x10\0\0\0\x6a\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\xe8\x01\0\0\0\x4c\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\xe8\x01\0\0\x05\x4c\0\0\x7a\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\x3f\x02\0\0\0\x64\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\x3f\x02\0\0\x05\x64\0\0\x8b\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\x60\x02\0\0\0\x7c\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\x60\x02\0\0\x05\x7c\0\0\x9c\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\x81\x02\0\0\0\x94\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\x81\x02\0\0\x05\x94\0\0\xac\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\xa1\x02\0\0\0\xac\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\xa1\x02\0\0\x05\xac\0\0\xbe\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\xc3\x02\0\0\0\xc4\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\xc3\x02\0\0\x05\xc4\0\0\xce\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\xe1\x02\0\0\0\xdc\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\xe1\x02\0\0\x05\xdc\0\0\xdf\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\0\x03\0\0\0\xf4\0\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\0\
\x9a\x01\0\0\0\x03\0\0\x05\xf4\0\0\xf0\x03\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\0\
\x1f\x03\0\0\0\x0c\x01\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\0\
\0\x9a\x01\0\0\x1f\x03\0\0\x05\x0c\x01\0\0\x04\0\0\x03\0\0\0\0\0\0\0\x9a\x01\0\
\0\x3d\x03\0\0\0\x24\x01\0\x08\0\0\0\x9a\x01\0\0\x08\x02\0\0\x02\x38\0\0\x20\0\
\0\0\x9a\x01\0\0\x3d\x03\0\0\x05\x24\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\x68\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x02\0\0\0\0\0\0\x40\
\x02\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\
\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x04\0\0\0\0\0\0\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x21\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x05\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x48\x05\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x43\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x78\x05\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x53\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x05\
\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x65\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x05\0\0\0\0\0\0\
\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x75\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x06\0\0\0\0\0\0\x30\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x06\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x97\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x68\x06\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xa7\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x98\x06\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xb9\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x06\0\0\
\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xbe\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x06\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8a\x01\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x06\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x9e\x01\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x06\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb3\x01\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x06\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\
\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xc8\x01\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x06\
\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xdc\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x10\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x07\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf2\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x20\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x08\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x06\x02\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x30\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x09\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x1b\x02\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x30\x02\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\
\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x44\x02\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x07\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x5a\x02\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x07\0\0\0\0\0\
\0\x56\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\
\x02\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0e\0\0\0\0\0\0\xf8\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct vfsstat_bpf *vfsstat_bpf::open(const struct bpf_object_open_opts *opts) { return vfsstat_bpf__open_opts(opts); }
struct vfsstat_bpf *vfsstat_bpf::open_and_load() { return vfsstat_bpf__open_and_load(); }
int vfsstat_bpf::load(struct vfsstat_bpf *skel) { return vfsstat_bpf__load(skel); }
int vfsstat_bpf::attach(struct vfsstat_bpf *skel) { return vfsstat_bpf__attach(skel); }
void vfsstat_bpf::detach(struct vfsstat_bpf *skel) { vfsstat_bpf__detach(skel); }
void vfsstat_bpf::destroy(struct vfsstat_bpf *skel) { vfsstat_bpf__destroy(skel); }
const void *vfsstat_bpf::elf_bytes(size_t *sz) { return vfsstat_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
vfsstat_bpf__assert(struct vfsstat_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->stats) == 40, "unexpected size of 'stats'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __VFSSTAT_BPF_SKEL_H__ */
