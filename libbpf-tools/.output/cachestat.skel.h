/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CACHESTAT_BPF_SKEL_H__
#define __CACHESTAT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct cachestat_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *fentry_add_to_page_cache_lru;
		struct bpf_program *fentry_mark_page_accessed;
		struct bpf_program *fentry_account_page_dirtied;
		struct bpf_program *fentry_mark_buffer_dirty;
		struct bpf_program *kprobe_add_to_page_cache_lru;
		struct bpf_program *kprobe_mark_page_accessed;
		struct bpf_program *kprobe_account_page_dirtied;
		struct bpf_program *kprobe_folio_account_dirtied;
		struct bpf_program *kprobe_mark_buffer_dirty;
		struct bpf_program *tracepoint__writeback_dirty_folio;
		struct bpf_program *tracepoint__writeback_dirty_page;
	} progs;
	struct {
		struct bpf_link *fentry_add_to_page_cache_lru;
		struct bpf_link *fentry_mark_page_accessed;
		struct bpf_link *fentry_account_page_dirtied;
		struct bpf_link *fentry_mark_buffer_dirty;
		struct bpf_link *kprobe_add_to_page_cache_lru;
		struct bpf_link *kprobe_mark_page_accessed;
		struct bpf_link *kprobe_account_page_dirtied;
		struct bpf_link *kprobe_folio_account_dirtied;
		struct bpf_link *kprobe_mark_buffer_dirty;
		struct bpf_link *tracepoint__writeback_dirty_folio;
		struct bpf_link *tracepoint__writeback_dirty_page;
	} links;
	struct cachestat_bpf__bss {
		__s64 total;
		__s64 misses;
		__u64 mbd;
	} *bss;

#ifdef __cplusplus
	static inline struct cachestat_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct cachestat_bpf *open_and_load();
	static inline int load(struct cachestat_bpf *skel);
	static inline int attach(struct cachestat_bpf *skel);
	static inline void detach(struct cachestat_bpf *skel);
	static inline void destroy(struct cachestat_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
cachestat_bpf__destroy(struct cachestat_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
cachestat_bpf__create_skeleton(struct cachestat_bpf *obj);

static inline struct cachestat_bpf *
cachestat_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct cachestat_bpf *obj;
	int err;

	obj = (struct cachestat_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = cachestat_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	cachestat_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct cachestat_bpf *
cachestat_bpf__open(void)
{
	return cachestat_bpf__open_opts(NULL);
}

static inline int
cachestat_bpf__load(struct cachestat_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct cachestat_bpf *
cachestat_bpf__open_and_load(void)
{
	struct cachestat_bpf *obj;
	int err;

	obj = cachestat_bpf__open();
	if (!obj)
		return NULL;
	err = cachestat_bpf__load(obj);
	if (err) {
		cachestat_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
cachestat_bpf__attach(struct cachestat_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
cachestat_bpf__detach(struct cachestat_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *cachestat_bpf__elf_bytes(size_t *sz);

static inline int
cachestat_bpf__create_skeleton(struct cachestat_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "cachestat_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "cachesta.bss";
	s->maps[0].map = &obj->maps.bss;
	s->maps[0].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 11;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "fentry_add_to_page_cache_lru";
	s->progs[0].prog = &obj->progs.fentry_add_to_page_cache_lru;
	s->progs[0].link = &obj->links.fentry_add_to_page_cache_lru;

	s->progs[1].name = "fentry_mark_page_accessed";
	s->progs[1].prog = &obj->progs.fentry_mark_page_accessed;
	s->progs[1].link = &obj->links.fentry_mark_page_accessed;

	s->progs[2].name = "fentry_account_page_dirtied";
	s->progs[2].prog = &obj->progs.fentry_account_page_dirtied;
	s->progs[2].link = &obj->links.fentry_account_page_dirtied;

	s->progs[3].name = "fentry_mark_buffer_dirty";
	s->progs[3].prog = &obj->progs.fentry_mark_buffer_dirty;
	s->progs[3].link = &obj->links.fentry_mark_buffer_dirty;

	s->progs[4].name = "kprobe_add_to_page_cache_lru";
	s->progs[4].prog = &obj->progs.kprobe_add_to_page_cache_lru;
	s->progs[4].link = &obj->links.kprobe_add_to_page_cache_lru;

	s->progs[5].name = "kprobe_mark_page_accessed";
	s->progs[5].prog = &obj->progs.kprobe_mark_page_accessed;
	s->progs[5].link = &obj->links.kprobe_mark_page_accessed;

	s->progs[6].name = "kprobe_account_page_dirtied";
	s->progs[6].prog = &obj->progs.kprobe_account_page_dirtied;
	s->progs[6].link = &obj->links.kprobe_account_page_dirtied;

	s->progs[7].name = "kprobe_folio_account_dirtied";
	s->progs[7].prog = &obj->progs.kprobe_folio_account_dirtied;
	s->progs[7].link = &obj->links.kprobe_folio_account_dirtied;

	s->progs[8].name = "kprobe_mark_buffer_dirty";
	s->progs[8].prog = &obj->progs.kprobe_mark_buffer_dirty;
	s->progs[8].link = &obj->links.kprobe_mark_buffer_dirty;

	s->progs[9].name = "tracepoint__writeback_dirty_folio";
	s->progs[9].prog = &obj->progs.tracepoint__writeback_dirty_folio;
	s->progs[9].link = &obj->links.tracepoint__writeback_dirty_folio;

	s->progs[10].name = "tracepoint__writeback_dirty_page";
	s->progs[10].prog = &obj->progs.tracepoint__writeback_dirty_page;
	s->progs[10].link = &obj->links.tracepoint__writeback_dirty_page;

	s->data = cachestat_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *cachestat_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x90\x19\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1d\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x66\x65\
\x6e\x74\x72\x79\x2f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\
\x63\x68\x65\x5f\x6c\x72\x75\0\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\x6b\x5f\
\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\0\x66\x65\x6e\x74\x72\x79\
\x2f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\x74\x69\
\x65\x64\0\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\
\x72\x5f\x64\x69\x72\x74\x79\0\x6b\x70\x72\x6f\x62\x65\x2f\x61\x64\x64\x5f\x74\
\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x6b\x70\x72\
\x6f\x62\x65\x2f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\
\x73\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\
\x61\x67\x65\x5f\x64\x69\x72\x74\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x66\
\x6f\x6c\x69\x6f\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\x69\x65\
\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\x72\
\x5f\x64\x69\x72\x74\x79\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x77\x72\
\x69\x74\x65\x62\x61\x63\x6b\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x5f\x64\
\x69\x72\x74\x79\x5f\x66\x6f\x6c\x69\x6f\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\
\x74\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x2f\x77\x72\x69\x74\x65\x62\x61\
\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x70\x61\x67\x65\0\x2e\x62\x73\x73\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\x63\x61\x63\x68\x65\x73\x74\x61\x74\x2e\x62\x70\x66\
\x2e\x63\0\x66\x65\x6e\x74\x72\x79\x5f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\
\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x6d\x69\x73\x73\x65\x73\0\x66\
\x65\x6e\x74\x72\x79\x5f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\
\x65\x73\x73\x65\x64\0\x74\x6f\x74\x61\x6c\0\x66\x65\x6e\x74\x72\x79\x5f\x61\
\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\x74\x69\x65\x64\0\
\x66\x65\x6e\x74\x72\x79\x5f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\x72\x5f\
\x64\x69\x72\x74\x79\0\x6d\x62\x64\0\x6b\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\
\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x6b\
\x70\x72\x6f\x62\x65\x5f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\
\x65\x73\x73\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x5f\x61\x63\x63\x6f\x75\x6e\x74\
\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\x74\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\
\x5f\x66\x6f\x6c\x69\x6f\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\
\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x5f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\
\x65\x72\x5f\x64\x69\x72\x74\x79\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\
\x5f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x66\x6f\
\x6c\x69\x6f\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x77\x72\x69\x74\
\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x70\x61\x67\x65\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x61\x64\x64\x5f\
\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x2e\x72\
\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\
\x61\x63\x63\x65\x73\x73\x65\x64\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\
\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\x74\x69\x65\
\x64\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\x6b\x5f\x62\x75\
\x66\x66\x65\x72\x5f\x64\x69\x72\x74\x79\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\
\x65\x2f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\
\x5f\x6c\x72\x75\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x6d\x61\x72\x6b\
\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\0\x2e\x72\x65\x6c\x6b\
\x70\x72\x6f\x62\x65\x2f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\
\x64\x69\x72\x74\x69\x65\x64\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x66\
\x6f\x6c\x69\x6f\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\x69\x65\
\x64\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x6d\x61\x72\x6b\x5f\x62\x75\
\x66\x66\x65\x72\x5f\x64\x69\x72\x74\x79\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\
\x70\x6f\x69\x6e\x74\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x2f\x77\x72\x69\
\x74\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x66\x6f\x6c\x69\x6f\0\x2e\
\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x77\x72\x69\x74\x65\
\x62\x61\x63\x6b\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\
\x79\x5f\x70\x61\x67\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x01\0\0\x04\0\xf1\
\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x01\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x95\x01\0\0\x11\0\x0e\0\x08\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\x9c\x01\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x30\0\0\0\
\0\0\0\0\xb6\x01\0\0\x11\0\x0e\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xbc\x01\0\0\
\x12\0\x05\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\xd8\x01\0\0\x12\0\x06\0\0\0\0\0\
\0\0\0\0\x50\0\0\0\0\0\0\0\xf1\x01\0\0\x11\0\x0e\0\x10\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\xf5\x01\0\0\x12\0\x07\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x12\x02\0\0\
\x12\0\x08\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x2c\x02\0\0\x12\0\x09\0\0\0\0\0\
\0\0\0\0\x30\0\0\0\0\0\0\0\x48\x02\0\0\x12\0\x0a\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\
\0\0\0\x65\x02\0\0\x12\0\x0b\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x7e\x02\0\0\
\x12\0\x0c\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\xa0\x02\0\0\x12\0\x0d\0\0\0\0\0\
\0\0\0\0\x30\0\0\0\0\0\0\0\xc1\x02\0\0\x11\0\x0f\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\
\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\
\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\
\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\
\0\0\0\0\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xdb\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\
\x28\0\0\0\0\0\0\0\x01\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\
\x28\0\0\0\0\0\0\0\x01\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x7c\x04\
\0\0\x7c\x04\0\0\x3f\x07\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\0\0\0\x01\
\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x14\0\0\0\x01\0\0\0\x18\0\0\
\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x1c\0\0\0\x01\0\0\x0c\x03\0\0\0\x39\0\0\0\
\x01\0\0\x0c\x03\0\0\0\x53\0\0\0\x01\0\0\x0c\x03\0\0\0\x6f\0\0\0\x01\0\0\x0c\
\x03\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x88\0\0\0\x09\0\0\x04\x50\x01\0\0\0\0\0\
\0\x0b\0\0\0\0\0\0\0\x90\0\0\0\x11\0\0\0\x80\x08\0\0\x98\0\0\0\x13\0\0\0\xc0\
\x08\0\0\xa2\0\0\0\x15\0\0\0\xe0\x08\0\0\xaa\0\0\0\x11\0\0\0\0\x09\0\0\xb5\0\0\
\0\x11\0\0\0\x40\x09\0\0\xbe\0\0\0\x18\0\0\0\x80\x09\0\0\xc9\0\0\0\x11\0\0\0\0\
\x0a\0\0\xda\0\0\0\x11\0\0\0\x40\x0a\0\0\0\0\0\0\x02\0\0\x05\x10\x01\0\0\xe3\0\
\0\0\x0c\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xed\0\0\0\x04\0\0\x04\x10\x01\
\0\0\xfa\0\0\0\x0e\0\0\0\0\0\0\0\xff\0\0\0\x0d\0\0\0\xc0\x07\0\0\x02\x01\0\0\
\x0d\0\0\0\0\x08\0\0\x05\x01\0\0\x0d\0\0\0\x40\x08\0\0\x0c\x01\0\0\0\0\0\x08\
\x02\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0d\0\0\0\x0f\0\0\0\x1f\0\0\0\x12\x01\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x10\x01\0\0\xfa\0\0\0\x12\0\
\0\0\0\0\0\0\xff\0\0\0\x11\0\0\0\xc0\x07\0\0\x02\x01\0\0\x11\0\0\0\0\x08\0\0\
\x05\x01\0\0\x11\0\0\0\x40\x08\0\0\x26\x01\0\0\0\0\0\x08\x0d\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x11\0\0\0\x0f\0\0\0\x1f\0\0\0\x2a\x01\0\0\0\0\0\x08\x14\0\0\0\
\x2e\x01\0\0\0\0\0\x08\x04\0\0\0\x34\x01\0\0\0\0\0\x08\x16\0\0\0\x38\x01\0\0\0\
\0\0\x08\x17\0\0\0\x3e\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x11\0\0\0\x0f\0\0\0\x02\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x14\0\0\0\
\x09\0\0\0\x4b\x01\0\0\x01\0\0\x0c\x19\0\0\0\x68\x01\0\0\x01\0\0\x0c\x19\0\0\0\
\x82\x01\0\0\x01\0\0\x0c\x19\0\0\0\x9e\x01\0\0\x01\0\0\x0c\x19\0\0\0\xbb\x01\0\
\0\x01\0\0\x0c\x19\0\0\0\0\0\0\0\0\0\0\x02\x20\0\0\0\xd4\x01\0\0\x04\0\0\x04\
\x40\0\0\0\xee\x01\0\0\x21\0\0\0\0\0\0\0\xf2\x01\0\0\x24\0\0\0\x40\0\0\0\xf5\
\x01\0\0\x26\0\0\0\x80\0\0\0\xfa\x01\0\0\x28\0\0\0\0\x02\0\0\x01\x02\0\0\x04\0\
\0\x04\x08\0\0\0\x0d\x02\0\0\x22\0\0\0\0\0\0\0\x12\x02\0\0\x23\0\0\0\x10\0\0\0\
\x18\x02\0\0\x23\0\0\0\x18\0\0\0\x26\x02\0\0\x04\0\0\0\x20\0\0\0\x2a\x02\0\0\0\
\0\0\x01\x02\0\0\0\x10\0\0\0\x39\x02\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\x47\x02\
\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x4c\x02\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x25\0\0\0\x0f\0\0\0\x06\0\0\0\x5a\x02\0\0\0\0\0\x01\
\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x27\0\0\0\x0f\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\x0d\x04\0\0\0\x14\0\0\0\x1f\0\0\0\x5f\x02\0\0\x01\0\0\x0c\x29\0\
\0\0\x81\x02\0\0\x01\0\0\x0c\x29\0\0\0\xa2\x02\0\0\0\0\0\x08\x2d\0\0\0\xa8\x02\
\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\xb2\x02\0\0\0\0\0\x0e\x2c\0\0\0\x01\0\0\0\
\xb8\x02\0\0\0\0\0\x0e\x2c\0\0\0\x01\0\0\0\xbf\x02\0\0\0\0\0\x0e\x0d\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x27\0\0\0\x0f\0\0\0\x04\0\0\0\xc3\x02\0\0\0\0\
\0\x0e\x31\0\0\0\x01\0\0\0\xe8\x05\0\0\x03\0\0\x0f\x18\0\0\0\x2e\0\0\0\0\0\0\0\
\x08\0\0\0\x2f\0\0\0\x08\0\0\0\x08\0\0\0\x30\0\0\0\x10\0\0\0\x08\0\0\0\xed\x05\
\0\0\x01\0\0\x0f\x04\0\0\0\x32\0\0\0\0\0\0\0\x04\0\0\0\0\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x69\x6e\
\x74\0\x66\x65\x6e\x74\x72\x79\x5f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\x65\
\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x66\x65\x6e\x74\x72\x79\x5f\x6d\x61\
\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\0\x66\x65\x6e\
\x74\x72\x79\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\x69\
\x72\x74\x69\x65\x64\0\x66\x65\x6e\x74\x72\x79\x5f\x6d\x61\x72\x6b\x5f\x62\x75\
\x66\x66\x65\x72\x5f\x64\x69\x72\x74\x79\0\x70\x74\x5f\x72\x65\x67\x73\0\x6f\
\x72\x69\x67\x5f\x78\x30\0\x73\x79\x73\x63\x61\x6c\x6c\x6e\x6f\0\x75\x6e\x75\
\x73\x65\x64\x32\0\x73\x64\x65\x69\x5f\x74\x74\x62\x72\x31\0\x70\x6d\x72\x5f\
\x73\x61\x76\x65\0\x73\x74\x61\x63\x6b\x66\x72\x61\x6d\x65\0\x6c\x6f\x63\x6b\
\x64\x65\x70\x5f\x68\x61\x72\x64\x69\x72\x71\x73\0\x65\x78\x69\x74\x5f\x72\x63\
\x75\0\x75\x73\x65\x72\x5f\x72\x65\x67\x73\0\x75\x73\x65\x72\x5f\x70\x74\x5f\
\x72\x65\x67\x73\0\x72\x65\x67\x73\0\x73\x70\0\x70\x63\0\x70\x73\x74\x61\x74\
\x65\0\x5f\x5f\x75\x36\x34\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\
\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x36\x34\0\x73\x33\x32\0\x5f\x5f\x73\x33\x32\
\0\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\
\x6e\x74\0\x6b\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\
\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x6b\x70\x72\x6f\x62\x65\x5f\x6d\
\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\0\x6b\x70\
\x72\x6f\x62\x65\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\
\x69\x72\x74\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x5f\x66\x6f\x6c\x69\x6f\x5f\
\x61\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\x69\x65\x64\0\x6b\x70\x72\x6f\
\x62\x65\x5f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\x72\x5f\x64\x69\x72\x74\
\x79\0\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\
\x73\x5f\x65\x6e\x74\x65\x72\0\x65\x6e\x74\0\x69\x64\0\x61\x72\x67\x73\0\x5f\
\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\x65\x5f\x65\x6e\x74\x72\x79\0\x74\x79\
\x70\x65\0\x66\x6c\x61\x67\x73\0\x70\x72\x65\x65\x6d\x70\x74\x5f\x63\x6f\x75\
\x6e\x74\0\x70\x69\x64\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\
\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x6c\x6f\x6e\x67\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x68\x61\x72\0\x74\
\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x77\x72\x69\x74\x65\x62\x61\x63\
\x6b\x5f\x64\x69\x72\x74\x79\x5f\x66\x6f\x6c\x69\x6f\0\x74\x72\x61\x63\x65\x70\
\x6f\x69\x6e\x74\x5f\x5f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\
\x74\x79\x5f\x70\x61\x67\x65\0\x5f\x5f\x73\x36\x34\0\x6c\x6f\x6e\x67\x20\x6c\
\x6f\x6e\x67\0\x74\x6f\x74\x61\x6c\0\x6d\x69\x73\x73\x65\x73\0\x6d\x62\x64\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x68\x6f\x6d\x65\x2f\x72\x65\x76\x65\x72\x63\
\x63\x71\x69\x6e\x2f\x65\x62\x70\x66\x2f\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\
\x6f\x74\x73\x74\x72\x61\x70\x2d\x66\x6f\x72\x2d\x61\x6e\x64\x72\x6f\x69\x64\
\x2f\x6c\x69\x62\x62\x70\x66\x2d\x74\x6f\x6f\x6c\x73\x2f\x63\x61\x63\x68\x65\
\x73\x74\x61\x74\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\
\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x61\x64\x64\x5f\x74\x6f\x5f\x70\
\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\x29\0\x09\x5f\x5f\x73\x79\
\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x6d\
\x69\x73\x73\x65\x73\x2c\x20\x31\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\
\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x6d\x61\x72\x6b\x5f\x70\x61\x67\
\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\x29\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\
\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x74\x6f\x74\x61\
\x6c\x2c\x20\x31\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\
\x66\x65\x6e\x74\x72\x79\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\
\x5f\x64\x69\x72\x74\x69\x65\x64\x29\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\
\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x6d\x69\x73\x73\x65\x73\
\x2c\x20\x2d\x31\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\
\x66\x65\x6e\x74\x72\x79\x5f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\x72\x5f\
\x64\x69\x72\x74\x79\x29\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\
\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x74\x6f\x74\x61\x6c\x2c\x20\x2d\x31\
\x29\x3b\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\
\x5f\x61\x64\x64\x28\x26\x6d\x62\x64\x2c\x20\x31\x29\x3b\0\x69\x6e\x74\x20\x42\
\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x61\x64\
\x64\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\
\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\
\x6f\x62\x65\x5f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\
\x73\x65\x64\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\
\x6b\x70\x72\x6f\x62\x65\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\
\x5f\x64\x69\x72\x74\x69\x65\x64\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\
\x52\x4f\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x66\x6f\x6c\x69\x6f\x5f\x61\
\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\x69\x65\x64\x29\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x6b\x70\x72\x6f\x62\x65\x5f\x6d\
\x61\x72\x6b\x5f\x62\x75\x66\x66\x65\x72\x5f\x64\x69\x72\x74\x79\x29\0\x69\x6e\
\x74\x20\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x5f\x5f\x77\x72\x69\x74\x65\
\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x66\x6f\x6c\x69\x6f\x28\x73\x74\
\x72\x75\x63\x74\x20\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\
\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x2a\x20\x63\x74\x78\x29\0\x09\x72\
\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x69\x6e\x74\x20\x74\x72\x61\x63\x65\x70\x6f\
\x69\x6e\x74\x5f\x5f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\
\x79\x5f\x70\x61\x67\x65\x28\x73\x74\x72\x75\x63\x74\x20\x74\x72\x61\x63\x65\
\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\
\x72\x2a\x20\x63\x74\x78\x29\0\x2e\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x66\x65\x6e\x74\x72\x79\x2f\x61\x64\x64\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\
\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\
\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\x65\x73\x73\x65\x64\0\x66\x65\x6e\x74\
\x72\x79\x2f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\
\x74\x69\x65\x64\0\x66\x65\x6e\x74\x72\x79\x2f\x6d\x61\x72\x6b\x5f\x62\x75\x66\
\x66\x65\x72\x5f\x64\x69\x72\x74\x79\0\x6b\x70\x72\x6f\x62\x65\x2f\x61\x64\x64\
\x5f\x74\x6f\x5f\x70\x61\x67\x65\x5f\x63\x61\x63\x68\x65\x5f\x6c\x72\x75\0\x6b\
\x70\x72\x6f\x62\x65\x2f\x6d\x61\x72\x6b\x5f\x70\x61\x67\x65\x5f\x61\x63\x63\
\x65\x73\x73\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x61\x63\x63\x6f\x75\x6e\x74\
\x5f\x70\x61\x67\x65\x5f\x64\x69\x72\x74\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\
\x2f\x66\x6f\x6c\x69\x6f\x5f\x61\x63\x63\x6f\x75\x6e\x74\x5f\x64\x69\x72\x74\
\x69\x65\x64\0\x6b\x70\x72\x6f\x62\x65\x2f\x6d\x61\x72\x6b\x5f\x62\x75\x66\x66\
\x65\x72\x5f\x64\x69\x72\x74\x79\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\
\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\
\x5f\x64\x69\x72\x74\x79\x5f\x66\x6f\x6c\x69\x6f\0\x74\x72\x61\x63\x65\x70\x6f\
\x69\x6e\x74\x2f\x77\x72\x69\x74\x65\x62\x61\x63\x6b\x2f\x77\x72\x69\x74\x65\
\x62\x61\x63\x6b\x5f\x64\x69\x72\x74\x79\x5f\x70\x61\x67\x65\0\0\0\0\0\0\x9f\
\xeb\x01\0\x20\0\0\0\0\0\0\0\xb4\0\0\0\xb4\0\0\0\x8c\x02\0\0\x40\x03\0\0\0\0\0\
\0\x08\0\0\0\xf5\x05\0\0\x01\0\0\0\0\0\0\0\x05\0\0\0\x12\x06\0\0\x01\0\0\0\0\0\
\0\0\x06\0\0\0\x2c\x06\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x48\x06\0\0\x01\0\0\0\0\
\0\0\0\x08\0\0\0\x61\x06\0\0\x01\0\0\0\0\0\0\0\x1a\0\0\0\x7e\x06\0\0\x01\0\0\0\
\0\0\0\0\x1b\0\0\0\x98\x06\0\0\x01\0\0\0\0\0\0\0\x1c\0\0\0\xb4\x06\0\0\x01\0\0\
\0\0\0\0\0\x1d\0\0\0\xd1\x06\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\xea\x06\0\0\x01\0\
\0\0\0\0\0\0\x2a\0\0\0\x15\x07\0\0\x01\0\0\0\0\0\0\0\x2b\0\0\0\x10\0\0\0\xf5\
\x05\0\0\x03\0\0\0\0\0\0\0\xcb\x02\0\0\x1b\x03\0\0\0\x30\0\0\x08\0\0\0\xcb\x02\
\0\0\x46\x03\0\0\x02\x38\0\0\x20\0\0\0\xcb\x02\0\0\x1b\x03\0\0\x05\x30\0\0\x12\
\x06\0\0\x03\0\0\0\0\0\0\0\xcb\x02\0\0\x69\x03\0\0\0\x4c\0\0\x08\0\0\0\xcb\x02\
\0\0\x91\x03\0\0\x02\x54\0\0\x20\0\0\0\xcb\x02\0\0\x69\x03\0\0\x05\x4c\0\0\x2c\
\x06\0\0\x03\0\0\0\0\0\0\0\xcb\x02\0\0\xb3\x03\0\0\0\x68\0\0\x08\0\0\0\xcb\x02\
\0\0\xdd\x03\0\0\x02\x70\0\0\x20\0\0\0\xcb\x02\0\0\xb3\x03\0\0\x05\x68\0\0\x48\
\x06\0\0\x04\0\0\0\0\0\0\0\xcb\x02\0\0\x01\x04\0\0\0\x84\0\0\x08\0\0\0\xcb\x02\
\0\0\x28\x04\0\0\x02\x8c\0\0\x28\0\0\0\xcb\x02\0\0\x4b\x04\0\0\x02\x90\0\0\x40\
\0\0\0\xcb\x02\0\0\x01\x04\0\0\x05\x84\0\0\x61\x06\0\0\x03\0\0\0\0\0\0\0\xcb\
\x02\0\0\x6b\x04\0\0\0\xa4\0\0\x08\0\0\0\xcb\x02\0\0\x46\x03\0\0\x02\xac\0\0\
\x20\0\0\0\xcb\x02\0\0\x6b\x04\0\0\x05\xa4\0\0\x7e\x06\0\0\x03\0\0\0\0\0\0\0\
\xcb\x02\0\0\x98\x04\0\0\0\xc0\0\0\x08\0\0\0\xcb\x02\0\0\x91\x03\0\0\x02\xc8\0\
\0\x20\0\0\0\xcb\x02\0\0\x98\x04\0\0\x05\xc0\0\0\x98\x06\0\0\x03\0\0\0\0\0\0\0\
\xcb\x02\0\0\xc2\x04\0\0\0\xdc\0\0\x08\0\0\0\xcb\x02\0\0\xdd\x03\0\0\x02\xe4\0\
\0\x20\0\0\0\xcb\x02\0\0\xc2\x04\0\0\x05\xdc\0\0\xb4\x06\0\0\x03\0\0\0\0\0\0\0\
\xcb\x02\0\0\xee\x04\0\0\0\xf8\0\0\x08\0\0\0\xcb\x02\0\0\xdd\x03\0\0\x02\0\x01\
\0\x20\0\0\0\xcb\x02\0\0\xee\x04\0\0\x05\xf8\0\0\xd1\x06\0\0\x04\0\0\0\0\0\0\0\
\xcb\x02\0\0\x1b\x05\0\0\0\x14\x01\0\x08\0\0\0\xcb\x02\0\0\x28\x04\0\0\x02\x1c\
\x01\0\x28\0\0\0\xcb\x02\0\0\x4b\x04\0\0\x02\x20\x01\0\x40\0\0\0\xcb\x02\0\0\
\x1b\x05\0\0\x05\x14\x01\0\xea\x06\0\0\x03\0\0\0\0\0\0\0\xcb\x02\0\0\x44\x05\0\
\0\0\x34\x01\0\x08\0\0\0\xcb\x02\0\0\xdd\x03\0\0\x02\x3c\x01\0\x20\0\0\0\xcb\
\x02\0\0\x91\x05\0\0\x02\x40\x01\0\x15\x07\0\0\x03\0\0\0\0\0\0\0\xcb\x02\0\0\
\x9c\x05\0\0\0\x50\x01\0\x08\0\0\0\xcb\x02\0\0\xdd\x03\0\0\x02\x58\x01\0\x20\0\
\0\0\xcb\x02\0\0\x91\x05\0\0\x02\x5c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\x4d\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04\0\0\0\0\0\0\xa0\
\x02\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\
\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x07\0\0\0\0\0\0\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2e\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x07\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x90\x07\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xc0\x07\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x7d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x08\
\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x9a\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x08\0\0\0\0\0\0\
\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb4\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x08\0\0\0\0\0\0\x30\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xed\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xd0\x08\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x01\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x20\x09\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x31\x01\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x09\
\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x5b\x01\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x09\0\0\0\0\0\0\
\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x01\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x09\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\x02\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xea\x02\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x08\x03\0\0\x09\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x05\0\
\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x28\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xb8\x09\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x06\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x45\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xd8\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x07\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x66\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xe8\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x08\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x84\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xf8\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xa4\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\x0a\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\xc5\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x0a\0\
\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\xe2\x03\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x0a\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x11\x04\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x0a\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x02\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x3f\
\x04\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x0a\0\0\0\0\0\0\xd3\x0b\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x44\x04\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x16\0\0\0\0\0\0\x60\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct cachestat_bpf *cachestat_bpf::open(const struct bpf_object_open_opts *opts) { return cachestat_bpf__open_opts(opts); }
struct cachestat_bpf *cachestat_bpf::open_and_load() { return cachestat_bpf__open_and_load(); }
int cachestat_bpf::load(struct cachestat_bpf *skel) { return cachestat_bpf__load(skel); }
int cachestat_bpf::attach(struct cachestat_bpf *skel) { return cachestat_bpf__attach(skel); }
void cachestat_bpf::detach(struct cachestat_bpf *skel) { cachestat_bpf__detach(skel); }
void cachestat_bpf::destroy(struct cachestat_bpf *skel) { cachestat_bpf__destroy(skel); }
const void *cachestat_bpf::elf_bytes(size_t *sz) { return cachestat_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
cachestat_bpf__assert(struct cachestat_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->total) == 8, "unexpected size of 'total'");
	_Static_assert(sizeof(s->bss->misses) == 8, "unexpected size of 'misses'");
	_Static_assert(sizeof(s->bss->mbd) == 8, "unexpected size of 'mbd'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CACHESTAT_BPF_SKEL_H__ */
