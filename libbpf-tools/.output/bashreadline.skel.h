/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __BASHREADLINE_BPF_SKEL_H__
#define __BASHREADLINE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct bashreadline_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *events;
	} maps;
	struct {
		struct bpf_program *printret;
	} progs;
	struct {
		struct bpf_link *printret;
	} links;

#ifdef __cplusplus
	static inline struct bashreadline_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct bashreadline_bpf *open_and_load();
	static inline int load(struct bashreadline_bpf *skel);
	static inline int attach(struct bashreadline_bpf *skel);
	static inline void detach(struct bashreadline_bpf *skel);
	static inline void destroy(struct bashreadline_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
bashreadline_bpf__destroy(struct bashreadline_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
bashreadline_bpf__create_skeleton(struct bashreadline_bpf *obj);

static inline struct bashreadline_bpf *
bashreadline_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct bashreadline_bpf *obj;
	int err;

	obj = (struct bashreadline_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = bashreadline_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	bashreadline_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct bashreadline_bpf *
bashreadline_bpf__open(void)
{
	return bashreadline_bpf__open_opts(NULL);
}

static inline int
bashreadline_bpf__load(struct bashreadline_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct bashreadline_bpf *
bashreadline_bpf__open_and_load(void)
{
	struct bashreadline_bpf *obj;
	int err;

	obj = bashreadline_bpf__open();
	if (!obj)
		return NULL;
	err = bashreadline_bpf__load(obj);
	if (err) {
		bashreadline_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
bashreadline_bpf__attach(struct bashreadline_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
bashreadline_bpf__detach(struct bashreadline_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *bashreadline_bpf__elf_bytes(size_t *sz);

static inline int
bashreadline_bpf__create_skeleton(struct bashreadline_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "bashreadline_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "events";
	s->maps[0].map = &obj->maps.events;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "printret";
	s->progs[0].prog = &obj->progs.printret;
	s->progs[0].link = &obj->links.printret;

	s->data = bashreadline_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *bashreadline_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x75\x72\
\x65\x74\x70\x72\x6f\x62\x65\x2f\x72\x65\x61\x64\x6c\x69\x6e\x65\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x62\x61\x73\x68\x72\x65\x61\x64\x6c\
\x69\x6e\x65\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x37\0\x70\x72\x69\
\x6e\x74\x72\x65\x74\0\x65\x76\x65\x6e\x74\x73\0\x4c\x49\x43\x45\x4e\x53\x45\0\
\x2e\x72\x65\x6c\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x72\x65\x61\x64\x6c\
\x69\x6e\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x04\0\xf1\xff\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x45\0\0\0\0\0\x03\0\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x12\0\x03\
\0\0\0\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x55\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\
\x18\0\0\0\0\0\0\0\x5c\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xbf\
\x16\0\0\0\0\0\0\x79\x67\0\0\0\0\0\0\x15\x07\x1f\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\
\x07\x01\0\0\x98\xff\xff\xff\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x71\xa1\
\x98\xff\0\0\0\0\x55\x01\x19\0\x62\0\0\0\x71\xa1\x99\xff\0\0\0\0\x55\x01\x17\0\
\x61\0\0\0\x71\xa1\x9a\xff\0\0\0\0\x55\x01\x15\0\x73\0\0\0\x71\xa1\x9b\xff\0\0\
\0\0\x55\x01\x13\0\x68\0\0\0\x71\xa1\x9c\xff\0\0\0\0\x55\x01\x11\0\0\0\0\0\x85\
\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x0a\xa8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\
\0\x07\x01\0\0\xac\xff\xff\xff\xb7\x02\0\0\x50\0\0\0\xbf\x73\0\0\0\0\0\0\x85\0\
\0\0\x72\0\0\0\xbf\xa4\0\0\0\0\0\0\x07\x04\0\0\xa8\xff\xff\xff\xbf\x61\0\0\0\0\
\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x03\0\0\xff\xff\xff\xff\0\0\0\0\0\
\0\0\0\xb7\x05\0\0\x54\0\0\0\x85\0\0\0\x19\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xe0\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xdc\x02\
\0\0\xdc\x02\0\0\x15\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\
\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\x04\x18\0\0\0\x19\0\0\
\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x01\0\0\0\x40\0\0\0\x27\0\0\0\x01\0\0\0\x80\0\0\
\0\x32\0\0\0\0\0\0\x0e\x05\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\x39\0\0\
\0\x09\0\0\x04\x50\x01\0\0\0\0\0\0\x09\0\0\0\0\0\0\0\x41\0\0\0\x0f\0\0\0\x80\
\x08\0\0\x49\0\0\0\x11\0\0\0\xc0\x08\0\0\x53\0\0\0\x13\0\0\0\xe0\x08\0\0\x5b\0\
\0\0\x0f\0\0\0\0\x09\0\0\x66\0\0\0\x0f\0\0\0\x40\x09\0\0\x6f\0\0\0\x16\0\0\0\
\x80\x09\0\0\x7a\0\0\0\x0f\0\0\0\0\x0a\0\0\x8b\0\0\0\x0f\0\0\0\x40\x0a\0\0\0\0\
\0\0\x02\0\0\x05\x10\x01\0\0\x94\0\0\0\x0a\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\
\0\0\x9e\0\0\0\x04\0\0\x04\x10\x01\0\0\xab\0\0\0\x0d\0\0\0\0\0\0\0\xb0\0\0\0\
\x0b\0\0\0\xc0\x07\0\0\xb3\0\0\0\x0b\0\0\0\0\x08\0\0\xb6\0\0\0\x0b\0\0\0\x40\
\x08\0\0\xbd\0\0\0\0\0\0\x08\x0c\0\0\0\xc3\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x04\0\0\0\x1f\0\0\0\0\0\0\0\x04\0\0\x04\
\x10\x01\0\0\xab\0\0\0\x10\0\0\0\0\0\0\0\xb0\0\0\0\x0f\0\0\0\xc0\x07\0\0\xb3\0\
\0\0\x0f\0\0\0\0\x08\0\0\xb6\0\0\0\x0f\0\0\0\x40\x08\0\0\xd6\0\0\0\0\0\0\x08\
\x0b\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\0\x1f\0\0\0\xda\0\0\0\0\
\0\0\x08\x12\0\0\0\xde\0\0\0\0\0\0\x08\x02\0\0\0\xe4\0\0\0\0\0\0\x08\x14\0\0\0\
\xe8\0\0\0\0\0\0\x08\x15\0\0\0\xee\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\0\x02\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\
\xfb\0\0\0\x07\0\0\0\xff\0\0\0\x01\0\0\x0c\x17\0\0\0\x08\x01\0\0\0\0\0\x01\x01\
\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x04\0\0\0\x0d\
\x01\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\xf4\x02\0\0\x01\0\0\x0f\x04\0\0\0\x1b\0\
\0\0\0\0\0\0\x04\0\0\0\xfc\x02\0\0\x01\0\0\x0f\x18\0\0\0\x06\0\0\0\0\0\0\0\x18\
\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\
\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\x65\x76\x65\x6e\x74\x73\0\x70\x74\x5f\
\x72\x65\x67\x73\0\x6f\x72\x69\x67\x5f\x78\x30\0\x73\x79\x73\x63\x61\x6c\x6c\
\x6e\x6f\0\x75\x6e\x75\x73\x65\x64\x32\0\x73\x64\x65\x69\x5f\x74\x74\x62\x72\
\x31\0\x70\x6d\x72\x5f\x73\x61\x76\x65\0\x73\x74\x61\x63\x6b\x66\x72\x61\x6d\
\x65\0\x6c\x6f\x63\x6b\x64\x65\x70\x5f\x68\x61\x72\x64\x69\x72\x71\x73\0\x65\
\x78\x69\x74\x5f\x72\x63\x75\0\x75\x73\x65\x72\x5f\x72\x65\x67\x73\0\x75\x73\
\x65\x72\x5f\x70\x74\x5f\x72\x65\x67\x73\0\x72\x65\x67\x73\0\x73\x70\0\x70\x63\
\0\x70\x73\x74\x61\x74\x65\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x75\x36\x34\0\x73\x33\x32\0\x5f\
\x5f\x73\x33\x32\0\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x70\x72\x69\x6e\x74\x72\x65\x74\0\x63\
\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x68\x6f\x6d\x65\x2f\x72\x65\
\x76\x65\x72\x63\x63\x71\x69\x6e\x2f\x65\x62\x70\x66\x2f\x6c\x69\x62\x62\x70\
\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2d\x66\x6f\x72\x2d\x61\x6e\x64\
\x72\x6f\x69\x64\x2f\x6c\x69\x62\x62\x70\x66\x2d\x74\x6f\x6f\x6c\x73\x2f\x62\
\x61\x73\x68\x72\x65\x61\x64\x6c\x69\x6e\x65\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\
\x74\x20\x42\x50\x46\x5f\x4b\x52\x45\x54\x50\x52\x4f\x42\x45\x28\x70\x72\x69\
\x6e\x74\x72\x65\x74\x2c\x20\x63\x6f\x6e\x73\x74\x20\x76\x6f\x69\x64\x20\x2a\
\x72\x65\x74\x29\x20\x7b\0\x09\x69\x66\x20\x28\x21\x72\x65\x74\x29\0\x09\x62\
\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\
\x28\x26\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x63\x6f\x6d\x6d\
\x29\x29\x3b\0\x09\x69\x66\x20\x28\x63\x6f\x6d\x6d\x5b\x30\x5d\x20\x21\x3d\x20\
\x27\x62\x27\x20\x7c\x7c\x20\x63\x6f\x6d\x6d\x5b\x31\x5d\x20\x21\x3d\x20\x27\
\x61\x27\x20\x7c\x7c\x20\x63\x6f\x6d\x6d\x5b\x32\x5d\x20\x21\x3d\x20\x27\x73\
\x27\x20\x7c\x7c\x20\x63\x6f\x6d\x6d\x5b\x33\x5d\x20\x21\x3d\x20\x27\x68\x27\
\x20\x7c\x7c\x20\x63\x6f\x6d\x6d\x5b\x34\x5d\x20\x21\x3d\x20\x30\x20\x29\0\x09\
\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\
\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\
\x3b\0\x09\x64\x61\x74\x61\x2e\x70\x69\x64\x20\x3d\x20\x70\x69\x64\x3b\0\x09\
\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\x5f\x72\x65\x61\x64\x5f\x75\x73\x65\x72\
\x5f\x73\x74\x72\x28\x26\x64\x61\x74\x61\x2e\x73\x74\x72\x2c\x20\x73\x69\x7a\
\x65\x6f\x66\x28\x64\x61\x74\x61\x2e\x73\x74\x72\x29\x2c\x20\x72\x65\x74\x29\
\x3b\0\x09\x62\x70\x66\x5f\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\x5f\x6f\x75\
\x74\x70\x75\x74\x28\x63\x74\x78\x2c\x20\x26\x65\x76\x65\x6e\x74\x73\x2c\x20\
\x42\x50\x46\x5f\x46\x5f\x43\x55\x52\x52\x45\x4e\x54\x5f\x43\x50\x55\x2c\x20\
\x26\x64\x61\x74\x61\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x64\x61\x74\x61\x29\
\x29\x3b\0\x30\x3a\x30\x3a\x30\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\
\x73\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x72\x65\x61\x64\x6c\x69\x6e\x65\
\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xec\0\0\0\
\0\x01\0\0\x1c\0\0\0\x08\0\0\0\x02\x03\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\x10\0\0\
\0\x02\x03\0\0\x0e\0\0\0\0\0\0\0\x15\x01\0\0\x68\x01\0\0\0\x44\0\0\x08\0\0\0\
\x15\x01\0\0\x68\x01\0\0\x05\x44\0\0\x10\0\0\0\x15\x01\0\0\x97\x01\0\0\x06\x58\
\0\0\x20\0\0\0\x15\x01\0\0\xa2\x01\0\0\x02\x64\0\0\x38\0\0\0\x15\x01\0\0\xce\
\x01\0\0\x06\x68\0\0\x40\0\0\0\x15\x01\0\0\xce\x01\0\0\x15\x68\0\0\x88\0\0\0\
\x15\x01\0\0\x2a\x02\0\0\x08\x74\0\0\x90\0\0\0\x15\x01\0\0\x2a\x02\0\0\x23\x74\
\0\0\x98\0\0\0\x15\x01\0\0\x53\x02\0\0\x0b\x78\0\0\xa0\0\0\0\x15\x01\0\0\x64\
\x02\0\0\x1a\x7c\0\0\xb0\0\0\0\x15\x01\0\0\x64\x02\0\0\x02\x7c\0\0\xd0\0\0\0\
\x15\x01\0\0\x2a\x02\0\0\x08\x74\0\0\xd8\0\0\0\x15\x01\0\0\xa0\x02\0\0\x02\x84\
\0\0\x10\x01\0\0\x15\x01\0\0\x68\x01\0\0\x05\x44\0\0\x10\0\0\0\x02\x03\0\0\x01\
\0\0\0\x08\0\0\0\x0a\0\0\0\xee\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\
\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\
\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x01\0\0\0\0\0\0\x20\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\0\0\0\x01\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x02\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2c\0\0\0\x01\0\0\0\x03\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x02\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xb8\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x7b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc8\x02\0\0\0\0\0\0\x09\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x80\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x08\0\0\0\
\0\0\0\x3c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct bashreadline_bpf *bashreadline_bpf::open(const struct bpf_object_open_opts *opts) { return bashreadline_bpf__open_opts(opts); }
struct bashreadline_bpf *bashreadline_bpf::open_and_load() { return bashreadline_bpf__open_and_load(); }
int bashreadline_bpf::load(struct bashreadline_bpf *skel) { return bashreadline_bpf__load(skel); }
int bashreadline_bpf::attach(struct bashreadline_bpf *skel) { return bashreadline_bpf__attach(skel); }
void bashreadline_bpf::detach(struct bashreadline_bpf *skel) { bashreadline_bpf__detach(skel); }
void bashreadline_bpf::destroy(struct bashreadline_bpf *skel) { bashreadline_bpf__destroy(skel); }
const void *bashreadline_bpf::elf_bytes(size_t *sz) { return bashreadline_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
bashreadline_bpf__assert(struct bashreadline_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __BASHREADLINE_BPF_SKEL_H__ */
